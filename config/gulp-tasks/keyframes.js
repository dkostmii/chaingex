import { spring } from 'css-spring'

import fs from 'fs'

// Spring: { mass: 1, stiffness: 80, damping: 20 };

const style = {
  desktop: {
    blockWidth: '508.06px',
    blockHeight: '472px',
    blockAnimatedWidth: '468.06px',
    blockAnimatedHeight: '452px'
  },
  tablet: {
    blockWidth: '566.19px',
    blockHeight: '526px',
    blockAnimatedWidth: '521.46px',
    blockAnimatedHeight: '507.59px'
  },
  mobile: {
    blockWidth: '379.46px',
    blockHeight: '351.75px',
    blockAnimatedWidth: '349.48px',
    blockAnimatedHeight: '339.44px'
  }
}

function capitalize(str) {
  return str[0].toUpperCase() + str.substring(1).toLowerCase()
}

function getMediaString(device) {
  return `@media screen and (min-width: \$${device.toLowerCase()})`
}

function containsMedia(str) {
  return str.includes('@media')
}

function getVariablesString() {
  // const mixinDeclaration = '@mixin blockSize()\n'
  const mixinDeclaration = ''

  return mixinDeclaration + Object.keys(style).map(device => {
    let media = ''
    const indent = mixinDeclaration.length > 0 ? ' '.repeat(2) : ''
    /*
    if (device !== 'mobile') {
      media = indent + getMediaString(device)
    }
    */
    
    const variableData = style[device]
    const variablesString = Object.keys(variableData).map(variable => {
      const value = variableData[variable]
      let indentInner = indent

      if (media.length > 0)
        indentInner += ' '.repeat(2)

      //return `${indentInner}\$${variable}: ${value}`
      return `\$${variable}${capitalize(device)}: ${value}`
    }).join('\n')

    return media.length > 0 ? [media, variablesString].join('\n') : variablesString
  }).sort((a, b) => containsMedia(a) - containsMedia(b)).join('\n\n')
}

function getKeyframesName(device) {
  return `crypto-icons-animation-${device}`
}

function getKeyframesString(keyframesAdaptive) {
  const keyframesLines = []

  Object.keys(keyframesAdaptive).forEach(device => {
    keyframesLines.push(`@keyframes ${getKeyframesName(device)}`)

    const keyframes = keyframesAdaptive[device]

    Object.keys(keyframes).forEach(
      percentage => {
        keyframesLines.push(' '.repeat(2) + percentage)
  
        const currentKeyframe = keyframes[percentage]
        const properties = Object.keys(currentKeyframe)
  
        properties.forEach(p => {
          keyframesLines.push(`${' '.repeat(4)}${p}: ${currentKeyframe[p]}`)
        })
      }
    )

    keyframesLines.push('\n')
  })

  return keyframesLines.join('\n')
}

const message = '/* Do not change this file. It is autogenerated using gen:keyframes NPM script */'
const importAdapt = "@import 'adapt'"

export const keyframes = () => {
  const keyframesAdaptive = { }

  Object.keys(style).map(device => {
    const { blockWidth, blockAnimatedWidth, blockHeight, blockAnimatedHeight } = style[device]

    const keyframes = spring(
      { width: blockWidth, height: blockHeight },
      { width: blockAnimatedWidth, height: blockAnimatedHeight },
      { stiffness: 80, damping: 20 }
    )

    keyframesAdaptive[device] = keyframes
  });

  fs.writeFileSync(app.path.src.keyframes, [
    message,
    //importAdapt,
    getVariablesString(),
    getKeyframesString(keyframesAdaptive)
  ].join('\n\n'))

  return app.gulp.src(`${app.path.src.keyframes}`)
};